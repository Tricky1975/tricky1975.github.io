/*
	JavaScript Source Generated by Scyndi
	Please read the original coder's documentation about the
	Copyright notices and under which terms this code may
	be distributed (if it may be distributed at al)
*/


const TRUE=true; const FALSE=false;

// Module: SYSTEM
// Code generated by Scyndi


const html_head = document.getElementById('scyndi_head')

const html_body = document.getElementById('scyndi_body')







// Global Variables (and constants)


// Translated functions

const SCYNDI_PRG_SYSTEM_FUNCTION_CHR = ( SCYNDI_ARGUMENT_I ) => {
	return String.fromCharCode(SCYNDI_ARGUMENT_I);
	
	
}

const SCYNDI_PRG_SYSTEM_VOID_WRITE = ( SCYNDI_ARGUMENT_A  ) => {
	let output="";
for(let i=0;i<SCYNDI_ARGUMENT_A.length;i++){
	if (i>0) output +=" ";
	output += SCYNDI_ARGUMENT_A[i];
}
console.log(output);


	
	
}

const SCYNDI_PRG_SYSTEM_VOID_WRITELN = ( SCYNDI_ARGUMENT_A  ) => {
	let output="";
for(let i=0;i<SCYNDI_ARGUMENT_A.length;i++){
	if (i>0) output +=" ";
	output += SCYNDI_ARGUMENT_A[i];
}
console.log(output);


	
	
}

const SCYNDI_PRG_SYSTEM_FUNC_READLN = ( SCYNDI_ARGUMENT_QUESTION ) => {
	
	
	return prompt(SCYNDI_ARGUMENT_QUESTION);
}

const SCYNDI_PRG_SYSTEM_FUNC_READINT = ( SCYNDI_ARGUMENT_QUESTION ) => {
	
	
	let q=SCYNDI_ARGUMENT_QUESTION;
let ret=NaN;
do{
    ret=Number(prompt(q));
} while( isNaN(ret) );
return ret;
   

}

const SCYNDI_PRG_SYSTEM_FUNC_UCASE = ( SCYNDI_ARGUMENT_STR ) => {
	
	
	return SCYNDI_ARGUMENT_STR.toUpperCase();
}

const SCYNDI_PRG_SYSTEM_FUNC_LCASE = ( SCYNDI_ARGUMENT_STR ) => {
	
	
	return SCYNDI_ARGUMENT_STR.toLowerCase();
}

const SCYNDI_PRG_SYSTEM_DEF_STRREPEAT = ( SCYNDI_ARGUMENT_STR , SCYNDI_ARGUMENT_TIMES ) => {
	
	
	   let ret = ""; for(let i=1;i<=SCYNDI_ARGUMENT_TIMES;i++) ret += SCYNDI_ARGUMENT_STR; return ret;
}

const SCYNDI_PRG_SYSTEM_DEF_REPLACE = ( SCYNDI_ARGUMENT_ORISTRING , SCYNDI_ARGUMENT_ORI , SCYNDI_ARGUMENT_REPWITH ) => {
	
	let mystring=SCYNDI_ARGUMENT_ORISTRING;
let ret=mystring;
do {
	mystring=ret;
	ret = mystring.replace(mystring,SCYNDI_ARGUMENT_ORI,SCYNDI_ARGUMENT_REPWITH);
} while (ret!==mystring)
return ret;

	
}

const SCYNDI_PRG_SYSTEM_DEF_TRIM = ( SCYNDI_ARGUMENT_STR ) => {
	
	
	return SCYNDI_ARGUMENT_STR.trim();
}

const SCYNDI_PRG_SYSTEM_DEF_STRLEN = ( SCYNDI_ARGUMENT_STR ) => {
	
	
	return SCYNDI_ARGUMENT_STR.length;
}

const SCYNDI_PRG_SYSTEM_DEF_LEFT = ( SCYNDI_ARGUMENT_STR , SCYNDI_ARGUMENT_L ) => {
	
	
	return SCYNDI_ARGUMENT_STR.slice(0,SCYNDI_ARGUMENT_L);
}

const SCYNDI_PRG_SYSTEM_DEF_RIGHT = ( SCYNDI_ARGUMENT_STR , SCYNDI_ARGUMENT_L ) => {
	
	
	return SCYNDI_ARGUMENT_STR.slice(-SCYNDI_ARGUMENT_L);
}

const SCYNDI_PRG_SYSTEM_DEF_MID = ( SCYNDI_ARGUMENT_STR , SCYNDI_ARGUMENT_P , SCYNDI_ARGUMENT_L ) => {
	
	
	let s=SCYNDI_ARGUMENT_P-1; let e=s+SCYNDI_ARGUMENT_L; return SCYNDI_ARGUMENT_STR.slice(s,e);
}

const SCYNDI_PRG_SYSTEM_DEF_SLICE = ( SCYNDI_ARGUMENT_STR , SCYNDI_ARGUMENT_START , SCYNDI_ARGUMENT_EINDE ) => {
	
	return SCYNDI_ARGUMENT_STR.slice(start,einde)
	
}





// End module: SYSTEM

// Module: MATH
// Code generated by Scyndi








// Global Variables (and constants)
let SCYNDI_VAR_MATH_MATHDEGRADTEMP = 0
const SCYNDI_SMATH_CONSTANT_PI = 3.1415926535898
let SCYNDI_VAR_MATH_POWVAL = 0


// Translated functions

const SCYNDI_PRG_MATH_VOID_SEEDRAND = ( SCYNDI_ARGUMENT_F ) => {
}

const SCYNDI_PRG_MATH_DEF_RAND = ( SCYNDI_ARGUMENT_MINIMAAL , SCYNDI_ARGUMENT_MAXIMAAL ) => {
	if ( SCYNDI_ARGUMENT_MAXIMAAL === 0 ) {
		return Math.ceil(Math.random() * SCYNDI_ARGUMENT_MINIMAAL)
	}
	return (Math.floor(Math.random() * ((SCYNDI_ARGUMENT_MAXIMAAL + 1) - SCYNDI_ARGUMENT_MINIMAAL))) + SCYNDI_ARGUMENT_MINIMAAL
}

const SCYNDI_PRG_MATH_DEF_FACTORIAL = ( SCYNDI_ARGUMENT_N ) => {
	if ( SCYNDI_ARGUMENT_N < 0 ) {
		return 0
	}
	if ( SCYNDI_ARGUMENT_N === 0 ) {
		return 1
	}
	return SCYNDI_PRG_MATH_DEF_FACTORIAL(SCYNDI_ARGUMENT_N - 1) * SCYNDI_ARGUMENT_N
}

const SCYNDI_PRG_MATH_DEF_FIBONACCI = ( SCYNDI_ARGUMENT_N ) => {
	if ( SCYNDI_ARGUMENT_N <= 0 ) {
		return 0
	}
	if ( SCYNDI_ARGUMENT_N === 1 ) {
		return 1
	}
	return SCYNDI_PRG_MATH_DEF_FIBONACCI(SCYNDI_ARGUMENT_N - 1) + SCYNDI_PRG_MATH_DEF_FIBONACCI(SCYNDI_ARGUMENT_N - 2)
}

const SCYNDI_PRG_MATH_DEF_POW = ( SCYNDI_ARGUMENT_VALUE , SCYNDI_ARGUMENT_POWER ) => {
	if ( SCYNDI_ARGUMENT_POWER === 0 ) {
		return 0
	}
	if ( SCYNDI_ARGUMENT_POWER === 1 ) {
		return SCYNDI_ARGUMENT_VALUE
	}
	SCYNDI_VAR_MATH_POWVAL = SCYNDI_ARGUMENT_VALUE
	for(let SCYNDI_FOR1_INDEX=2;SCYNDI_FOR1_INDEX<=SCYNDI_ARGUMENT_POWER; SCYNDI_FOR1_INDEX+=1){
		SCYNDI_VAR_MATH_POWVAL = SCYNDI_VAR_MATH_POWVAL * SCYNDI_VAR_MATH_POWVAL
	}
	return SCYNDI_VAR_MATH_POWVAL
}

const SCYNDI_PRG_MATH_DEF_DEG2RAD = ( SCYNDI_ARGUMENT_DEG ) => {
	SCYNDI_VAR_MATH_MATHDEGRADTEMP = (SCYNDI_ARGUMENT_DEG * SCYNDI_SMATH_CONSTANT_PI) / 180
	return SCYNDI_VAR_MATH_MATHDEGRADTEMP
}

const SCYNDI_PRG_MATH_DEF_RAD2DEG = ( SCYNDI_ARGUMENT_RAD ) => {
	SCYNDI_VAR_MATH_MATHDEGRADTEMP = (SCYNDI_ARGUMENT_RAD * 180) / SCYNDI_SMATH_CONSTANT_PI
	return SCYNDI_VAR_MATH_MATHDEGRADTEMP
}





// End module: MATH

// ************
// MAIN PROGRAM
// ************
// Code generated by Scyndi








// Global Variables (and constants)
let SCYNDI_VAR_DOBBELSTEEN_DICE = []
let SCYNDI_VAR_DOBBELSTEEN_TEMPBODY = ""


// Translated functions

const SCYNDI_PRG_DOBBELSTEEN_DEF_NUMDICEKINDS = (  ) => {
	return SCYNDI_VAR_DOBBELSTEEN_DICE.length
}

const SCYNDI_PRG_DOBBELSTEEN_VOID_ELSET = ( SCYNDI_ARGUMENT_KEY , SCYNDI_ARGUMENT_VALUE ) => {
	document.getElementById(SCYNDI_ARGUMENT_KEY).innerHTML = SCYNDI_ARGUMENT_VALUE;
}

const SCYNDI_PRG_DOBBELSTEEN_DEF_ELGET = ( SCYNDI_ARGUMENT_KEY ) => {
	return document.getElementById(SCYNDI_ARGUMENT_KEY).innerHTML;
}

const SCYNDI_PRG_DOBBELSTEEN_DEF_ELINP = ( SCYNDI_ARGUMENT_KEY ) => {
	return document.getElementById(SCYNDI_ARGUMENT_KEY).value;
}

const SCYNDI_PRG_DOBBELSTEEN_VOID_ELADD = ( SCYNDI_ARGUMENT_KEY , SCYNDI_ARGUMENT_VALUE ) => {
	let SCYNDI_LOCAL_SCOPE50_WORK = ""
	SCYNDI_LOCAL_SCOPE50_WORK = SCYNDI_PRG_DOBBELSTEEN_DEF_ELGET(SCYNDI_ARGUMENT_KEY)
	SCYNDI_LOCAL_SCOPE50_WORK = SCYNDI_LOCAL_SCOPE50_WORK + SCYNDI_ARGUMENT_VALUE
	SCYNDI_PRG_DOBBELSTEEN_VOID_ELSET(SCYNDI_ARGUMENT_KEY, SCYNDI_LOCAL_SCOPE50_WORK)
}

const SCYNDI_PRG_DOBBELSTEEN_VOID_ROLL = (  ) => {
	SCYNDI_PRG_SYSTEM_VOID_WRITELN([ /*[0] =*/ "Let's Roll!" ])
	let SCYNDI_LOCAL_SCOPE51_GRANDTOTAL = 0
	let SCYNDI_LOCAL_SCOPE51_KINDS = null
	SCYNDI_LOCAL_SCOPE51_KINDS = SCYNDI_PRG_DOBBELSTEEN_DEF_NUMDICEKINDS()
	let SCYNDI_LOCAL_SCOPE51_SUBTOT = 0
	for(let SCYNDI_FOR2_INDEX=0;SCYNDI_FOR2_INDEX<SCYNDI_LOCAL_SCOPE51_KINDS; SCYNDI_FOR2_INDEX+=1){
		let SCYNDI_LOCAL_SCOPE52_DOUT = ""
		SCYNDI_LOCAL_SCOPE52_DOUT = "dout" + SCYNDI_VAR_DOBBELSTEEN_DICE[SCYNDI_FOR2_INDEX]
		let SCYNDI_LOCAL_SCOPE52_DTOT = ""
		SCYNDI_LOCAL_SCOPE52_DTOT = "dtot" + SCYNDI_VAR_DOBBELSTEEN_DICE[SCYNDI_FOR2_INDEX]
		let SCYNDI_LOCAL_SCOPE52_D = ""
		SCYNDI_LOCAL_SCOPE52_D = "d" + SCYNDI_VAR_DOBBELSTEEN_DICE[SCYNDI_FOR2_INDEX]
		SCYNDI_PRG_DOBBELSTEEN_VOID_ELSET(SCYNDI_LOCAL_SCOPE52_DOUT, "")
		SCYNDI_PRG_DOBBELSTEEN_VOID_ELSET(SCYNDI_LOCAL_SCOPE52_DTOT, "")
		let SCYNDI_LOCAL_SCOPE52_SWANT = ""
		SCYNDI_LOCAL_SCOPE52_SWANT = SCYNDI_PRG_DOBBELSTEEN_DEF_ELINP(SCYNDI_LOCAL_SCOPE52_D)
		let SCYNDI_LOCAL_SCOPE52_WANT = 0
		SCYNDI_LOCAL_SCOPE52_WANT = parseInt(SCYNDI_LOCAL_SCOPE52_SWANT)
		SCYNDI_LOCAL_SCOPE51_SUBTOT = 0
		SCYNDI_PRG_SYSTEM_VOID_WRITELN([ /*[0] =*/ "Rolling " + SCYNDI_LOCAL_SCOPE52_D + ";",/*[1] =*/ "want=" + SCYNDI_LOCAL_SCOPE52_WANT + "<" + SCYNDI_LOCAL_SCOPE52_SWANT ])
		for(let SCYNDI_FOR3_INDEX=1;SCYNDI_FOR3_INDEX<=SCYNDI_LOCAL_SCOPE52_WANT; SCYNDI_FOR3_INDEX+=1){
			let SCYNDI_LOCAL_SCOPE53_DROLL = null
			SCYNDI_LOCAL_SCOPE53_DROLL = SCYNDI_PRG_MATH_DEF_RAND(1, SCYNDI_VAR_DOBBELSTEEN_DICE[SCYNDI_FOR2_INDEX])
			SCYNDI_PRG_SYSTEM_VOID_WRITELN([ /*[0] =*/ "roll #" + SCYNDI_FOR3_INDEX,/*[1] =*/ "Rolled: " + SCYNDI_LOCAL_SCOPE53_DROLL ])
			if ( SCYNDI_FOR3_INDEX != 1 ) {
				SCYNDI_PRG_DOBBELSTEEN_VOID_ELADD(SCYNDI_LOCAL_SCOPE52_DOUT, "; ")
			}
			SCYNDI_PRG_DOBBELSTEEN_VOID_ELADD(SCYNDI_LOCAL_SCOPE52_DOUT, SCYNDI_LOCAL_SCOPE53_DROLL)
			SCYNDI_LOCAL_SCOPE51_SUBTOT = SCYNDI_LOCAL_SCOPE51_SUBTOT + SCYNDI_LOCAL_SCOPE53_DROLL
		}
		SCYNDI_LOCAL_SCOPE51_GRANDTOTAL = SCYNDI_LOCAL_SCOPE51_GRANDTOTAL + SCYNDI_LOCAL_SCOPE51_SUBTOT
	}
	SCYNDI_PRG_DOBBELSTEEN_VOID_ELSET("totaal", SCYNDI_LOCAL_SCOPE51_GRANDTOTAL)
}

const SCYNDI_PRG_DOBBELSTEEN_DEF_JSROLL = (  ) => {
	return 'SCYNDI_PRG_DOBBELSTEEN_VOID_ROLL';
}

const SCYNDI_PRG_DOBBELSTEEN_VOID_HTML_TEMPLATE = (  ) => {
	SCYNDI_PRG_SYSTEM_VOID_WRITELN([ /*[0] =*/ "Let's set the header" ])
	document.getElementById('scyndi_head').innerHTML = "\n\t\t<title>Dobbelsteen</title>\t\t\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<meta http-equiv=\"Content-language\" content=\"en\"/>\n"
	document.getElementById('scyndi_head').innerHTML = document.getElementById('scyndi_head').innerHTML + "\t<style>body{ color:rgb(180,0,255); background-color: rgb(18,0,25); } input{ color: rgb(0,180,0); background-color: rgb(0,18,25); }</style>\n"
	SCYNDI_PRG_DOBBELSTEEN_VOID_BODYPRINT("This is just a simple web application which you can use to throw any number of dice. Just put in the number of dice in each field you wanna roll and click roll to go for it<p>")
	SCYNDI_PRG_DOBBELSTEEN_VOID_BODYPRINT("This program has been coded in Scyndi and the source code can be found <a href='https://github.com/Wendicka/Dobbelsteen' target=_blank>here</a><p>")
}

const SCYNDI_PRG_DOBBELSTEEN_VOID_BODYPRINT = ( SCYNDI_ARGUMENT_S ) => {
	SCYNDI_VAR_DOBBELSTEEN_TEMPBODY = SCYNDI_VAR_DOBBELSTEEN_TEMPBODY + SCYNDI_ARGUMENT_S
	SCYNDI_PRG_SYSTEM_VOID_WRITELN([ /*[0] =*/ "BodyPrint: ",/*[1] =*/ SCYNDI_ARGUMENT_S ])
}

const SCYNDI_PRG_DOBBELSTEEN_VOID_BODYPUSH = (  ) => {
	document.getElementById('scyndi_body').innerHTML = document.getElementById('scyndi_body').innerHTML + SCYNDI_VAR_DOBBELSTEEN_TEMPBODY
	SCYNDI_VAR_DOBBELSTEEN_TEMPBODY = ""
}

const SCYNDI_PRG_DOBBELSTEEN_VOID_MAKE_D = ( SCYNDI_ARGUMENT_D ) => {
	SCYNDI_PRG_DOBBELSTEEN_VOID_BODYPRINT("<tr><td align=right>d" + SCYNDI_ARGUMENT_D + "</td><td><input id='d" + SCYNDI_ARGUMENT_D + "'></td><td id='dout" + SCYNDI_ARGUMENT_D + "'></td><td id='dtot" + SCYNDI_ARGUMENT_D + "'></td></tr>")
	SCYNDI_VAR_DOBBELSTEEN_DICE.push(parseInt(SCYNDI_ARGUMENT_D));
}

const SCYNDI_PRG_DOBBELSTEEN_VOID_DOBBEL_SETUP = (  ) => {
	let SCYNDI_LOCAL_SCOPE60_JSR = ""
	SCYNDI_LOCAL_SCOPE60_JSR = SCYNDI_PRG_DOBBELSTEEN_DEF_JSROLL()
	SCYNDI_PRG_DOBBELSTEEN_VOID_BODYPRINT("<table><caption>Dice</caption>")
	SCYNDI_PRG_DOBBELSTEEN_VOID_BODYPRINT("<tr><td>Die</td><td>Amount</td><td>Rolls</td><td>Totals</td><td rowspan=8><input type=submit value=Roll OnClick='" + SCYNDI_LOCAL_SCOPE60_JSR + "();'></td></tr>")
	for(let SCYNDI_FOR4_INDEX=2;SCYNDI_FOR4_INDEX<=12; SCYNDI_FOR4_INDEX+=2){
		SCYNDI_PRG_DOBBELSTEEN_VOID_MAKE_D(SCYNDI_FOR4_INDEX)
	}
	SCYNDI_PRG_DOBBELSTEEN_VOID_MAKE_D("20")
	SCYNDI_PRG_DOBBELSTEEN_VOID_MAKE_D("30")
	SCYNDI_PRG_DOBBELSTEEN_VOID_MAKE_D("100")
	SCYNDI_PRG_DOBBELSTEEN_VOID_BODYPRINT("<tr><td align=right colspan=3>Total:</td><td id=totaal></td></tr>")
	SCYNDI_PRG_DOBBELSTEEN_VOID_BODYPRINT("</table>")
	SCYNDI_PRG_DOBBELSTEEN_VOID_BODYPUSH()
}

const SCYNDI_PRG_DOBBELSTEEN_VOID_MAIN = (  ) => {
	SCYNDI_PRG_DOBBELSTEEN_VOID_HTML_TEMPLATE()
	SCYNDI_PRG_DOBBELSTEEN_VOID_DOBBEL_SETUP()
}





// Call main
SCYNDI_PRG_DOBBELSTEEN_VOID_MAIN()
